function getThingTypeUID(thingUID) {
	var segments = thingUID.split(':');
	return segments[0] + ':' + segments[1];
};
    
angular.module('PaperUI.controllers.configuration', 
[]).controller('ConfigurationPageController', function($scope, $location, thingTypeRepository) {
    $scope.navigateTo = function(path) {
        $location.path('configuration/' + path);
    }
    $scope.thingTypes = [];
    thingTypeRepository.getAll(function(thingTypes) {
        $.each(thingTypes, function(i, thingType) {
            $scope.thingTypes[thingType.UID] = thingType;
        });
    });
    $scope.getThingTypeUID = getThingTypeUID; 
}).controller('BindingController', function($scope, $mdDialog, bindingRepository) {
	$scope.setSubtitle(['Bindings']);
	$scope.setHeaderText('Shows all installed bindings.');
	$scope.refresh = function() {
		bindingRepository.getAll(true);	
	};
	$scope.openBindingInfoDialog = function(bindingId, event) {
		$mdDialog.show({
			controller : 'BindingInfoDialogController',
			templateUrl : 'partials/dialog.bindinginfo.html',
			targetEvent : event,
			hasBackdrop: true,
			locals: {bindingId: bindingId}
		});
	}
   $scope.configure = function(bindingId, configDescriptionURI, event) {
        $mdDialog.show({
            controller : 'ConfigureBindingDialogController',
            templateUrl : 'partials/dialog.configurebinding.html',
            targetEvent : event,
            hasBackdrop: true,
            locals : {
                bindingId : bindingId,
                configDescriptionURI : configDescriptionURI
            }
        });
    }
	bindingRepository.getAll();
}).controller('BindingInfoDialogController', function($scope, $mdDialog, thingTypeRepository, bindingRepository, bindingId) {
	$scope.binding = undefined;
	bindingRepository.getOne(function(binding) {
		return binding.id === bindingId;
	}, function(binding) {
		 $scope.binding = binding;
		 $scope.binding.thingTypes = [];
		 thingTypeRepository.getAll(function(thingTypes) {
		     $.each(thingTypes, function(index, thingType) {
		         if(thingType.UID.split(':')[0] === binding.id) {
		             $scope.binding.thingTypes.push(thingType);
		         }
	        });
		 });
	});
	$scope.close = function() {
		$mdDialog.hide();
	}
}).controller('ConfigureBindingDialogController', function($scope, $mdDialog, bindingRepository, bindingService, 
        configService, configDescriptionService, toastService, bindingId, configDescriptionURI) {
    
    $scope.binding = null;
    $scope.parameters = [];
    $scope.config = {};
    
    if(configDescriptionURI) {
        $scope.expertMode = false;
        configDescriptionService.getByUri({uri: configDescriptionURI}, function(configDescription) {
            if(configDescription) {
                $scope.parameters = configService.getRenderingModel(configDescription.parameters);
            }
        });
    }
    if(bindingId) {
        bindingRepository.getOne(function(binding) {
            return binding.id === bindingId;
        }, function(binding) {
            $scope.binding = binding;
        });
        bindingService.getConfigById({id: bindingId}).$promise.then(function(config) {
            $scope.configuration = config;
            $scope.configArray = configService.getConfigAsArray(config);
        }, function(failed) {
            $scope.configuration = {};
            $scope.configArray = configService.getConfigAsArray($scope.configuration);
        });
    } else {
        $scope.newConfig = true;
        $scope.serviceId = '';
        $scope.configuration = {'':''};
        $scope.configArray = [];
        $scope.expertMode = true;
    }
    $scope.close = function() {
        $mdDialog.hide();
    }
    $scope.addParameter = function() {
        $scope.configArray.push({
            name: '',
            value: undefined
        });
    }
    $scope.save = function() {
        if($scope.expertMode) {
            $scope.configuration = configService.getConfigAsObject($scope.configArray);
        }
        bindingService.updateConfig({id: bindingId}, $scope.configuration, function() {
            $mdDialog.hide();
            toastService.showDefaultToast('Binding config updated.');
        });
    }
    $scope.$watch('expertMode', function() {
        if($scope.expertMode) {
            $scope.configArray = configService.getConfigAsArray($scope.configuration);
        } else {
            $scope.configuration = configService.getConfigAsObject($scope.configArray);
        }
    });
}).controller('ServicesController', function($scope, $mdDialog, serviceConfigService, toastService) {
	$scope.setSubtitle(['Services']);
	$scope.setHeaderText('Shows all configurable services.');
	$scope.refresh = function() {
		serviceConfigService.getAll(function(services) {
			$scope.services = services;
		});	
	};
	$scope.add = function(serviceId, event) {
		$mdDialog.show({
			controller : 'ConfigureServiceDialogController',
			templateUrl : 'partials/dialog.configureservice.html',
			targetEvent : event,
			hasBackdrop: true,
			locals : {
				serviceId : undefined,
				configDescriptionURI : undefined
			}
		}).then(function() {
			$scope.refresh();
		});
	}
	$scope.configure = function(serviceId, configDescriptionURI, event) {
		$mdDialog.show({
			controller : 'ConfigureServiceDialogController',
			templateUrl : 'partials/dialog.configureservice.html',
			targetEvent : event,
			hasBackdrop: true,
			locals : {
				serviceId : serviceId,
				configDescriptionURI : configDescriptionURI
			}
		});
	}
	$scope.remove = function(serviceId, event) {
		var confirm = $mdDialog.confirm()
	      .title('Remove configuration')
	      .content('Would you like to remove the service configurarion for the service ' + serviceId + '?')
	      .ariaLabel('Remove Service Configuration')
	      .ok('Remove')
	      .cancel('Cancel')
	      .targetEvent(event);
	    $mdDialog.show(confirm).then(function() {
			serviceConfigService.deleteConfig({id: serviceId}, function() {
				toastService.showDefaultToast('Service config deleted.');
				$scope.refresh();
			});
	    });
	}
	$scope.refresh();
}).controller('ConfigureServiceDialogController', function($scope, $mdDialog, configService, serviceConfigService, 
		configDescriptionService, toastService, serviceId, configDescriptionURI) {
	
	$scope.service = null;
	$scope.parameters = [];
	$scope.config = {};
	
	if(configDescriptionURI) {
		$scope.expertMode = false;
		configDescriptionService.getByUri({uri: configDescriptionURI}, function(configDescription) {
			if(configDescription) {
				$scope.parameters = configService.getRenderingModel(configDescription.parameters);
			}
		});
	}
	if(serviceId) {
		serviceConfigService.getById({id: serviceId}, function(service) {
			$scope.service = service;
		});
		serviceConfigService.getConfigById({id: serviceId}).$promise.then(function(config) {
			if(config) {
				$scope.configuration = config;
				$scope.configArray = configService.getConfigAsArray(config);
			}
		});
	} else {
		$scope.newConfig = true;
		$scope.serviceId = '';
		$scope.configuration = {'':''};
		$scope.configArray = [];
		$scope.expertMode = true;
	}
	$scope.close = function() {
		$mdDialog.hide();
	}
	$scope.addParameter = function() {
		$scope.configArray.push({
			name: '',
			value: undefined
		});
	}
	$scope.save = function() {
		if($scope.expertMode) {
			$scope.configuration = configService.getConfigAsObject($scope.configArray);
		}
		serviceConfigService.updateConfig({id: (serviceId ? serviceId : $scope.serviceId)}, $scope.configuration, function() {
			$mdDialog.hide();
			toastService.showDefaultToast('Service config updated.');
		});
	}
	$scope.$watch('expertMode', function() {
		if($scope.expertMode) {
			$scope.configArray = configService.getConfigAsArray($scope.configuration);
		} else {
			$scope.configuration = configService.getConfigAsObject($scope.configArray);
		}
	});
}).controller('GroupController', function($scope, $mdDialog, toastService, homeGroupRepository, groupSetupService) {
	$scope.setSubtitle(['Home Groups']);
	$scope.setHeaderText('Shows all configured Home Groups.');
	$scope.refresh = function() {
		homeGroupRepository.getAll(true);
	}
	$scope.add = function(event) {
		$mdDialog.show({
			controller : 'AddGroupDialogController',
			templateUrl : 'partials/dialog.addgroup.html',
			hasBackdrop: true,
			targetEvent : event
		}).then(function(label) {
			var homeGroup = {
	                name : 'home_group_' + $scope.generateUUID(),
	                label: label
            };
		    groupSetupService.add(homeGroup, function() {
		    	$scope.refresh();
	            toastService.showDefaultToast('Group added.');
	        });
		});
	};
	$scope.remove = function(homeGroup, event) {
    	var confirm = $mdDialog.confirm()
	      .title('Remove ' + homeGroup.label)
	      .content('Would you like to remove the group?')
	      .ariaLabel('Remove Group')
	      .ok('Remove')
	      .cancel('Cancel')
	      .targetEvent(event);
	    $mdDialog.show(confirm).then(function() {
	    	groupSetupService.remove({
	            itemName : homeGroup.name
	        }, function() {
	        	$scope.refresh();
	            toastService.showSuccessToast('Group removed');
	        });
	    });
    };
	$scope.refresh();
}).controller('AddGroupDialogController', function($scope, $mdDialog) {
	$scope.binding = undefined;
	
	$scope.close = function() {
		$mdDialog.cancel();
	}
	$scope.add  = function(label) {		
		$mdDialog.hide(label);
	}
}).controller('ThingController', function($scope, $timeout, $mdDialog, thingRepository, 
        thingSetupService, toastService, homeGroupRepository) {
	$scope.setSubtitle(['Things']);
	$scope.setHeaderText('Shows all configured Things.');
	$scope.refresh = function() {
		thingRepository.getAll(true);	
	}
	$scope.remove = function(thing, event) {
        event.stopImmediatePropagation();
	    $mdDialog.show({
            controller : 'RemoveThingDialogController',
            templateUrl : 'partials/dialog.removething.html',
            targetEvent : event,
            hasBackdrop: true,
            locals: {thing: thing}
        }).then(function() {
            $scope.refresh();
        });
    }
	$scope.refresh();
}).controller('ViewThingController', function($scope, $mdDialog, toastService, thingTypeRepository, 
		thingRepository, thingSetupService, homeGroupRepository, linkService) {
	
	var thingUID = $scope.path[4];
	var thingTypeUID = getThingTypeUID(thingUID);
	
	$scope.thing;
	$scope.thingType;
	$scope.edit = function(thing, event) {
		$mdDialog.show({
			controller : 'EditThingDialogController',
			templateUrl : 'partials/dialog.editthing.html',
			targetEvent : event,
			hasBackdrop: true,
			locals: {thing: thing}
		});
	};
	$scope.remove = function(thing, event) {
	    event.stopImmediatePropagation();
	    $mdDialog.show({
            controller : 'RemoveThingDialogController',
            templateUrl : 'partials/dialog.removething.html',
            targetEvent : event,
            hasBackdrop: true,
            locals: {thing: thing}
        }).then(function() {
            $scope.navigateTo('things');
        });
    }
	
	$scope.enableChannel = function(thingUID, channelID, event) {
	    if($scope.advancedMode) {
	        $scope.linkChannel(channelID, event);
	    } else {
            thingSetupService.enableChannel({channelUID: thingUID + ':' + channelID}, function() {
    		    $scope.getThing(true);
    		    toastService.showDefaultToast('Channel enabled');
    	    });
	    }
	};
	
	$scope.disableChannel = function(thingUID, channelID, event) {
	    if($scope.advancedMode) {
            $scope.unlinkChannel(channelID, event);
        } else {
    	    thingSetupService.disableChannel({channelUID: thingUID + ':' + channelID}, function() {
    			$scope.getThing(true);
    			toastService.showDefaultToast('Channel disabled');
    		});
        }
	};
	
	$scope.linkChannel = function(channelID, event) {
	    var channel = $scope.getChannelById(channelID);
        $mdDialog.show({
            controller : 'LinkChannelDialogController',
            templateUrl : 'partials/dialog.linkchannel.html',
            targetEvent : event,
            hasBackdrop: true,
            linkedItem: channel.linkedItems.length > 0 ? channel.linkedItems[0] : '',
            acceptedItemType: channel.itemType + 'Item'
        }).then(function(itemName) {
            linkService.link({itemName: itemName, channelUID: $scope.thing.UID + ':' + channelID}, function() {
                $scope.getThing(true);
                toastService.showDefaultToast('Channel linked');    
            });
        });
    }
	
	$scope.unlinkChannel = function(channelID) {
        var channel = $scope.getChannelById(channelID);
        var linkedItem = channel.linkedItems[0];
        linkService.unlink({itemName: linkedItem, channelUID: $scope.thing.UID + ':' + channelID}, function() {
            $scope.getThing(true);
            toastService.showDefaultToast('Channel unlinked');    
        });
    }
	
	$scope.getChannelById = function(channelId) {
	    return $.grep($scope.thing.channels, function(channel, i) {
            return channelId == channel.id;
        })[0];
	}
	
    $scope.getChannelTypeById = function(channelId) {
        if (!$scope.thingType) {
            return;
        }
        var cid_part = channelId.split('#', 2)
        if (cid_part.length == 1) {
            var c, c_i, c_l;
            for (c_i = 0, c_l = $scope.thingType.channels.length; c_i < c_l; ++c_i) {
                c = $scope.thingType.channels[c_i];
                if (c.id == channelId) {
                    return c;
                }
            }
        } else if (cid_part.length == 2) {
            var cg, cg_i, cg_l;
            var c, c_i, c_l;
            for (cg_i = 0, cg_l = $scope.thingType.channelGroups.length; cg_i < cg_l; ++cg_i) {
                cg = $scope.thingType.channelGroups[cg_i];
                if (cg.id == cid_part[0]) {
                    for (c_i = 0, c_l = cg.channels.length; c_i < c_l; ++c_i) {
                        c = cg.channels[c_i];
                        if (c.id == cid_part[1]) {
                            return c;
                        }
                    }
                }
            }
        } else {
            return;
        }
    };
    
    $scope.getChannels = function(advanced) {
        if (!$scope.thingType || !$scope.thing) {
            return;
        }
        return $.grep($scope.thing.channels, function(channel, i) {
           var channelType = $scope.getChannelTypeById(channel.id);
           return channelType ? advanced == channelType.advanced : false;
        });
    };
	
    $scope.getThing = function(refresh) {
    	thingRepository.getOne(function(thing) {
    		return thing.UID === thingUID;
    	}, function(thing) {
    		$scope.thing = thing;
    		if(thing.item) {
    			$scope.setTitle(thing.item.label);
    		} else {
    			$scope.setTitle(thing.UID);
    		}
    	}, refresh);	
	}
	$scope.getThing(false);
	
	thingTypeRepository.getOne(function(thingType) {
		return thingType.UID === thingTypeUID;
	}, function(thingType) {
		$scope.thingType = thingType;
		$scope.setHeaderText(thingType.description);
	});
}).controller('RemoveThingDialogController', function($scope, $mdDialog, toastService, 
        thingSetupService, homeGroupRepository, thing) {
    $scope.thing = thing;
    $scope.isRemoving = thing.statusInfo.status === 'REMOVING';
    $scope.close = function() {
        $mdDialog.cancel();
    }
    $scope.remove  = function(thingUID) {    
        var forceRemove = $scope.isRemoving ? true : false;
        thingSetupService.remove({thingUID: thing.UID, force: forceRemove}, function() {
            homeGroupRepository.setDirty(true);
            if(forceRemove) {
                toastService.showDefaultToast('Thing removed (forced).');
            } else {
                toastService.showDefaultToast('Thing removal initiated.');
            }
            $mdDialog.hide();
        });
    }
}).controller('LinkChannelDialogController', function($scope, $mdDialog, toastService, itemRepository, linkedItem, acceptedItemType) {
    itemRepository.getAll(function(items) {
        $scope.items = items;
    });
    $scope.itemName = linkedItem;
    $scope.acceptedItemType = acceptedItemType;
    $scope.close = function() {
        $mdDialog.cancel();
    }
    $scope.link  = function(itemName) {    
        $mdDialog.hide(itemName);
    }
}).controller('EditThingController', function($scope, $mdDialog, toastService, 
		thingTypeRepository, thingRepository, thingSetupService, homeGroupRepository, configService) {
	
	$scope.setHeaderText('Click the \'Save\' button to apply the changes.');
	
	var thingUID = $scope.path[4];
	var thingTypeUID = getThingTypeUID(thingUID);
	
	$scope.thing;
	$scope.groups = [];
	$scope.thingType;
	
	$scope.homeGroups = [];
    $scope.groupNames = [];
	
	$scope.update = function(thing) {
		if(thing.item) {
			for (var groupName in $scope.groupNames) {
	            if($scope.groupNames[groupName]) {
	                thing.item.groupNames.push(groupName);
	            } else {
	                var index = thing.item.groupNames.indexOf(groupName);
	                if (index > -1) {
	                    thing.item.groupNames.splice(index, 1);
	                }
	            }
	        }
		} else {
		    thing.item = {};
        }
		thingSetupService.update(thing, function() {
	        thingRepository.update(thing);
			toastService.showDefaultToast('Thing updated');
			$scope.navigateTo('things/view/' + thing.UID);
		});
	};
	
	$scope.needsBridge = false;
    $scope.bridges = [];
    $scope.getBridges = function() {
        $scope.bridges = [];
        thingRepository.getAll(function(things) {
            for (var i = 0; i < things.length; i++) {
                var thing = things[i];
                for (var j = 0; j < $scope.thingType.supportedBridgeTypeUIDs.length; j++) {
                    var supportedBridgeTypeUID = $scope.thingType.supportedBridgeTypeUIDs[j];
                    if(getThingTypeUID(thing.UID) === supportedBridgeTypeUID) {
                        $scope.bridges.push(thing);
                    }   
                }
            }
        });
    };
    $scope.getThingType = function() {
        thingTypeRepository.getOne(function(thingType) {
            return thingType.UID === thingTypeUID;
        }, function(thingType) {
            $scope.thingType = thingType;
            $scope.parameters = configService.getRenderingModel(thingType.configParameters);
            $scope.needsBridge = $scope.thingType.supportedBridgeTypeUIDs && $scope.thingType.supportedBridgeTypeUIDs.length > 0;
            if($scope.needsBridge) {
                $scope.getBridges();
            }
        });
    };
	$scope.getThing = function(refresh) {
    	thingRepository.getOne(function(thing) {
    		return thing.UID === thingUID;
    	}, function(thing) {
    		$scope.thing = thing;
    		$scope.getThingType();
    	    if(thing.item) {
	    		homeGroupRepository.getAll(function(homeGroups) {
	    	        $.each(homeGroups, function(i, homeGroup) {
	    	            if($scope.thing.item.groupNames.indexOf(homeGroup.name) >= 0) {
	    	                $scope.groupNames[homeGroup.name] = true;
	    	            } else {
	    	                $scope.groupNames[homeGroup.name] = false;
	    	            }
	    	        });
	    	        $scope.homeGroups = homeGroups;
	    	    });
	    		$scope.setTitle('Edit ' + thing.item.label);
    	    } else {
    	    	$scope.setTitle('Edit ' + thing.UID);
    	    }
    	}, refresh);	
	}
	$scope.getThing(false);
});
angular.module('PaperUI.controllers.control', []).controller('ControlPageController', function($scope, $routeParams, $location, $timeout, itemRepository) {
    $scope.items = [];
    $scope.selectedIndex = 0;
    $scope.tabs = [];

    $scope.next = function() {
    	var newIndex = $scope.selectedIndex + 1;
    	if(newIndex > ($scope.tabs.length - 1)) {
    		newIndex = 0;
    	}
    	$scope.selectedIndex = newIndex;
	}
    $scope.prev = function() {
    	var newIndex = $scope.selectedIndex - 1;
    	if(newIndex < 0) {
    		newIndex = $scope.tabs.length - 1;
    	}
    	$scope.selectedIndex = newIndex;
	}

    $scope.refresh = function() {
        itemRepository.getAll(function(items) {
            $scope.tabs = [];
            $scope.items['All'] = items;
            for (var int = 0; int < items.length; int++) {
                var item = items[int];
                if (item.type === 'GroupItem') {
                    if(item.tags.indexOf("home-group") > -1) {
                        $scope.tabs.push({name:item.name, label: item.label});
                    }
                }
            }
        }, true);   
    }
    
    $scope.getItem = function(itemName) {
    	for (var int = 0; int < $scope.data.items.length; int++) {
            var item = $scope.data.items[int];
            if (item.name === itemName) {
                return item;
            }
        }
    	return null;
	}
    
    $scope.masonry = function() {
        if ($scope.data.items) {
            $timeout(function() {
            	var itemContainer = '#items-' + $scope.selectedIndex;
            	new Masonry(itemContainer, {});
            }, 100, true);
        }
	}
    $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
    	$scope.masonry();
    });
    $scope.refresh();
}).controller('ControlController', function($scope, $timeout, itemService) {
	$scope.getItemName = function(itemName) {
        return itemName.replace(/_/g, ' ');
    }
	
	$scope.getStateText = function(item) {
		if(item.state === 'NULL' || item.state === 'UNDEF') {
			return '-';
		}
		var state = item.type === 'NumberItem' ? parseFloat(item.state) : item.state;
		
		if(!item.stateDescription || !item.stateDescription.pattern) {
			return state;
		} else {
			return sprintf(item.stateDescription.pattern, state);
		}
    }
	
	$scope.getMinText = function(item) {
		if(!item.stateDescription || !item.stateDescription.minimum) {
			return '';
		} else if (!item.stateDescription.pattern) {
			return item.stateDescription.minimum;
		} else {
			return sprintf(item.stateDescription.pattern, item.stateDescription.minimum);
		}
    }
	
	$scope.getMaxText = function(item) {
		if(!item.stateDescription || !item.stateDescription.maximum) {
			return '';
		} else if (!item.stateDescription.pattern) {
			return item.stateDescription.maximum;
		} else {
			return sprintf(item.stateDescription.pattern, item.stateDescription.maximum);
		}
    }

    var categories = {
		'Alarm' : {},
		'Battery' : {},
		'Blinds' : {},
		'ColorLight' : {
			label: 'Color',
			icon: 'md-icon-wb-incandescent'
		},
		'Contact' : {},
		'DimmableLight' : {
			label: 'Brightness',
			icon: 'md-icon-wb-incandescent'
		},
		'CarbonDioxide' : {
			label: 'CO2'
		},
		'Door' : {},
		'Energy' : {},
		'Fan' : {},
		'Fire' : {},
		'Flow' : {},
		'GarageDoor' : {},
		'Gas' : {},
		'Humidity' : {},
		'Light' : {},
		'Motion' : {},
		'MoveControl' : {},
		'Player' : {},
		'PowerOutlet' : {},
		'Pressure' : {
			// icon: 'home-icon-measure_pressure_bar'
		},
		'Rain' : {},
		'Recorder' : {},
		'Smoke' : {},
		'SoundVolume' : {
			label: 'Volume',
			icon: 'md-icon-volume-up',
			hideSwitch: true
		},
		'Switch' : {},
		'Temperature' : {
		    label: 'Temperature'
		},
		'Water' : {},
		'Wind' : {},
		'Window' : {},
		'Zoom' : {},
    }
    
    $scope.getLabel = function (itemCategory, label, defaultLabel) {
    	if(label) {
    		return label;
    	}
    	
    	if(itemCategory) {
    		var category = categories[itemCategory];
    		if(category) {
    			return category.label ? category.label : itemCategory;
    		} else {
    			return defaultLabel;
    		}
    	} else {
			return defaultLabel;
		}
    }
    $scope.getIcon = function (itemCategory, fallbackIcon) {
    	var defaultIcon = fallbackIcon ? fallbackIcon : 'md-icon-radio-button-off';
    	if(itemCategory) {
    		var category = categories[itemCategory];
    		if(category) {
    			return category.icon ? category.icon : defaultIcon;
    		} else {
    			return defaultIcon;
			}
    	} else {
			return defaultIcon;
		}
    }
    $scope.isHideSwitch = function(itemCategory) {
    	if(itemCategory) {
    		var category = categories[itemCategory];
    		if(category) {
    			return category.hideSwitch;
    		}
    	}
    	return false;
	}
    $scope.isReadOnly = function (item) {
    	return item.stateDescription ? item.stateDescription.readOnly : false;
    }
    
	/**
	 * Check if the item has a configured option list.
	 * Returns true if there are options, otherwise false.
	 * 
	 * @param item
	 *            the current item
	 */
    $scope.isOptionList = function(item) {
    	return (item.stateDescription != null && item.stateDescription.options.length > 0)
    }
}).controller('ItemController', function($rootScope, $scope, itemService) {
    $scope.editMode = false;
    $scope.sendCommand = function(command, updateState) {
    	$rootScope.itemUpdates[$scope.item.name] = new Date().getTime();
        itemService.sendCommand({
            itemName : $scope.item.name
        }, command);
        if(updateState) {
            $scope.item.state = command;
        }
    };
    $scope.editState = function() {
        $scope.editMode = true;
    };
    $scope.updateState = function() {
        $scope.sendCommand($scope.item.state, false);
        $scope.editMode = false;
    };
}).controller('DefaultItemController', function($scope, itemService) {
	
	$scope.optionListChanged = function() {
		$scope.sendCommand($scope.item.state, false);
	};
	
}).controller('ImageItemController', function($scope, itemService) {
	
	$scope.refreshCameraImage = function() {
        itemService.sendCommand({
            itemName : $scope.item.name
        }, "REFRESH");
    };
    
}).controller('SwitchItemController', function($scope, $timeout, itemService) {
    $scope.setOn = function(state) {
        $scope.sendCommand(state);
    }
}).controller('DimmerItemController', function($scope, $timeout, itemService) {
	if($scope.item.state === 'UNDEF' || $scope.item.state === 'NULL') {
		$scope.item.state = '-';
	} 
	$scope.on = parseInt($scope.item.state) > 0 ? 'ON' : 'OFF';
    
	$scope.setOn = function(on) {
		$scope.on = on === 'ON' ? 'ON' : 'OFF';
		
        $scope.sendCommand(on);
        
        var brightness = parseInt($scope.item.state);
        if(on === 'ON' && brightness === 0) {
        	$scope.item.state = 100;
        }
        if(on === 'OFF' && brightness > 0) {
        	$scope.item.state = 0;
        }
    }
	$scope.pending = false;
	$scope.setBrightness = function(brightness) {
        // send updates every 300 ms only
        if(!$scope.pending) {
            $timeout(function() {
        	    var command = $scope.item.state === 0 ? '0' : $scope.item.state;
                $scope.sendCommand(command);
                $scope.pending = false;
            }, 300);
            $scope.pending = true;
        }
    }
	$scope.$watch('item.state', function() {
		var brightness = parseInt($scope.item.state);
		if(brightness > 0 && $scope.on === 'OFF') {
        	$scope.on = 'ON';
        }
        if(brightness === 0 && $scope.on === 'ON') {
        	$scope.on = 'OFF';
        }
	});
}).controller('ColorItemController', function($scope, $timeout, $element, itemService) {

	function getStateAsObject(state) {
		var stateParts = state.split(",");
		if(stateParts.length == 3) {
			return {
				h: parseInt(stateParts[0]),
				s: parseInt(stateParts[1]),
				b: parseInt(stateParts[2])
			}
		} else {
			return {
				h: 0,
				s: 0,
				b: 0
			}
		}
	}
	
	function toState(stateObject) {
		return Math.ceil(stateObject.h) + ',' + Math.ceil(stateObject.s) + ',' + Math.ceil(stateObject.b);
	}
	
	$scope.setOn = function(on) {
		
		 $scope.sendCommand(on);
        
        if(on === 'ON' && $scope.brightness === 0) {
        	$scope.brightness = 100;
        }
        if(on === 'OFF' && $scope.brightness > 0) {
        	$scope.brightness = 0;
        }
    }
    
	$scope.pending = false;
    
    $scope.setBrightness = function(brightness) {
    	 // send updates every 300 ms only
        if(!$scope.pending) {
        	$timeout(function() {
	        	var brightnessValue = $scope.brightness === 0 ? '0' : $scope.brightness;
		        
	        	 $scope.sendCommand(brightnessValue);
		        
		        var stateObject = getStateAsObject($scope.item.state);
		    	stateObject.b = brightnessValue;
		    	if($scope.on === 'ON' && $scope.brightness === 0) {
		    		$scope.on = 'OFF';
		        }
		        if($scope.on === 'OFF' && $scope.brightness > 0) {
		        	$scope.on = 'ON';
		        }
	        	$scope.pending = false;
	        }, 300);
	        $scope.pending = true;
        }
    }
    
    $scope.setHue = function(hue) {
    	 // send updates every 300 ms only
        if(!$scope.pending) {
            $timeout(function() {
            	var hueValue = $scope.hue === 0 ? '0' : $scope.hue;
            	
            	var stateObject = getStateAsObject($scope.item.state);
            	stateObject.h = hueValue;
            	stateObject.b = $scope.brightness;
            	
            	if (!stateObject.b) {
					stateObject.b = 100;
				}
            	if (!stateObject.s) {
					stateObject.s = 100;
				}

		        if($scope.on === 'OFF') {
		        	$scope.on = 'ON';
		        	$scope.brightness = 100;
		        }
		        
                var itemState = toState(stateObject);
                 
                $scope.sendCommand(itemState);
   
            	$scope.pending = false;
            }, 300);
            $scope.pending = true;
        }
        
    }

    $scope.getHexColor = function(hue) {
        var hsv = tinycolor({
            h : hue,
            s : 1,
            v : 1
        }).toHsv();
        return tinycolor(hsv).toHexString();
    }
    
    var setStates = function() {
    	var stateObject = getStateAsObject($scope.item.state);
    	var hue = stateObject.h;
        var brightness = stateObject.b;
        
        $scope.hue = hue ? hue : 0;
        $scope.brightness = brightness ? brightness : 0;
        $scope.on = $scope.brightness > 0 ? 'ON' : 'OFF';
	}
    
    setStates();
     
    $scope.$watch('item.state', function() {
    	setStates(); 
	});
    
    $scope.$watch('hue', function() {
        var hexColor = $scope.getHexColor($scope.hue);
        $($element).find('.hue .md-thumb').css('background-color', hexColor);
	});
    
    var hexColor =  $scope.getHexColor();
    $($element).find('.hue .md-thumb').css('background-color', hexColor);
}).controller('NumberItemController', function($scope) {
	$scope.shouldRenderSlider = function(item) {
		if(item.stateDescription) {
			var stateDescription = item.stateDescription;
			if(stateDescription.readOnly) {
				return false;
			} else {
				if(isNaN(stateDescription.minimum) || isNaN(stateDescription.maximum)) {
					return false;
				} else {
					return true;
				}
			}
		}
		return false;
	}
}).controller('RollershutterItemController', function($scope) {
	if($scope.item.state === 'UNDEF' || $scope.item.state === 'NULL') {
		$scope.item.state = '-';
	} 	
}).controller('PlayerItemController', function($scope) {

}).controller('LocationItemController', function($scope, $sce) {
    $scope.init = function() {
        if($scope.item.state !== 'UNDEF' && $scope.item.state !== 'NULL') {
            var latitude = parseFloat($scope.item.state.split(',')[0]);
            var longitude = parseFloat($scope.item.state.split(',')[1]);
            var bbox = (longitude - 0.01) + ',' + (latitude - 0.01) + ',' + (longitude + 0.01) + ',' + (latitude + 0.01);
            var marker = latitude + ',' + longitude;
            $scope.formattedState = latitude + '°N ' + longitude + '°E';
            $scope.url = $sce.trustAsResourceUrl('http://www.openstreetmap.org/export/embed.html?bbox=' + bbox + '&marker=' + marker);
        } else {
            $scope.formattedState = '- °N - °E';
        }
    };
    $scope.$watch('item.state', function() {
        $scope.init();
    });
    $scope.init();
});


angular.module('PaperUI.controllers.extension', ['PaperUI.constants']).controller('ExtensionPageController', function($scope, 
        extensionService, bindingRepository, thingTypeRepository, eventService, toastService) {
	$scope.navigateTo = function(path) {
		$location.path('extensions/' + path);
    };
    $scope.extensionTypes = [];
    $scope.refresh = function() {
        extensionService.getAllTypes(function(extensionTypes) {
            $scope.extensionTypes = [];
            angular.forEach(extensionTypes, function(extensionType) {
                $scope.extensionTypes.push({typeId: extensionType.id, label: extensionType.label, extensions: [], inProgress: false});
            });
            extensionService.getAll(function(extensions) {
                angular.forEach(extensions, function(extension) {
                    var extensionType = $scope.getType(extension.type);
                    if (extensionType !== undefined) {
                        extensionType.extensions.push(extension);
                    }
                });
            });
        });
    }
    
    $scope.getType = function(extensionTypeId) {
        var result;
        angular.forEach($scope.extensionTypes, function(extensionType) {
            if(extensionType.typeId === extensionTypeId) {
                result = extensionType;
            }
        });
        return result;
    };
    $scope.getExtension = function(extensionId) {
        var result;
        angular.forEach($scope.extensionTypes, function(extensionType) {
            angular.forEach(extensionType.extensions, function(extension) {
                if(extension.id === extensionId) {
                    result = extension;
                }
            });
        });
        return result;
    };
    $scope.refresh();
    $scope.install = function(extensionId) {
        var extension = $scope.getExtension(extensionId);
        extension.inProgress = true;
        extensionService.install({id: extensionId});
        bindingRepository.setDirty(true);
        thingTypeRepository.setDirty(true);
    };
    $scope.uninstall = function(extensionId) {
        var extension = $scope.getExtension(extensionId);
        extension.inProgress = true;
        extensionService.uninstall({id: extensionId});
        bindingRepository.setDirty(true);
        thingTypeRepository.setDirty(true);
    };
    eventService.onEvent('smarthome/extensions/*', function(topic, extensionId) {
        var extension = $scope.getExtension(extensionId);
        if(extension) {
            extension.inProgress = false;
            if(topic.indexOf("uninstalled") > -1) {
                extension.installed = false;
                toastService.showDefaultToast('Extension ' + extension.label + ' uninstalled.');
            } else if(topic.indexOf("installed") > -1) {
                extension.installed = true;
                toastService.showDefaultToast('Extension ' + extension.label + ' installed.');
            } else {
                toastService.showDefaultToast('Install or uninstall of extension ' + extension.label + ' failed.');
            }
        }
    });
});

angular.module('PaperUI.controllers', ['PaperUI.constants']).controller('BodyController', function($rootScope, $scope, eventService, 
        toastService, discoveryResultRepository, thingTypeRepository, bindingRepository) {
	$scope.scrollTop = 0;
	$(window).scroll(function() {
		$scope.$apply(function (scope) {
			$scope.scrollTop = $('body').scrollTop();
		});
	});
	$scope.isBigTitle = function() {
		return $scope.scrollTop < 80 && !$rootScope.simpleHeader;
    }
    $scope.setTitle = function(title) {
    	$rootScope.title = title;
	}
    $scope.subtitles = [];
    $scope.setSubtitle = function(args) {
    	$scope.subtitles = [];
    	$.each(args, function(i, subtitle) {
			$scope.subtitles.push(subtitle);
		})
	}
    $scope.setHeaderText = function(headerText) {
    	$scope.headerText = headerText;
	}
    $rootScope.$on('$routeChangeStart', function(){
    	$scope.subtitles = [];
    	$scope.headerText = null;
    });
    $scope.generateUUID = function() {
	    var d = new Date().getTime();
	    var uuid = 'xxxxxxxx'.replace(/[x]/g, function(c) {
	        var r = (d + Math.random()*16)%16 | 0;
	        d = Math.floor(d/16);
	        return (c=='x' ? r : (r&0x3|0x8)).toString(16);
	    });
	    return uuid;
	};

    var numberOfInboxEntries = -1;
    eventService.onEvent('smarthome/inbox/*/added', function(topic, discoveryResult) {
    	toastService.showDefaultToast('New Inbox Entry: ' + discoveryResult.label, 'Show Inbox', 'setup/wizard');
	});
    eventService.onEvent('smarthome/items/*/state', function(topic, stateObject) {
    	
    	var itemName = topic.split('/')[2];
    	var state = stateObject.value;
    	
    	console.log('Item ' + itemName + ' updated: ' + state);
    	
    	if($rootScope.itemUpdates[itemName] + 500 > new Date().getTime()) {
    		console.log('Ignoring update for ' + itemName + ', because update was probably triggered through UI.');
    		return;
    	}
    	
    	var changeStateRecursively = function(item) {
    		var updateState = true;
    		if(item.name === itemName) {
    			// ignore ON and OFF update for Dimmer
    			if(item.type === 'DimmerItem') {
					if(state === 'ON' || state == 'OFF') {
						updateState = false;
    				}
    			}
    			// ignore ON, OFF and percentage update for Dimmer
    			if(item.type === 'ColorItem') {
    				if(state.indexOf(',') < 0) {
						updateState = false;
    				}
    			}
    			if(updateState) {
	    			$scope.$apply(function (scope) {
	    				item.state = state;
	    			});
    			} else {
    				console.log('Ignoring state ' + state + ' for ' + itemName)
    			}
    		}
			if(item.members) {
				$.each(item.members, function(i, memberItem) {
					changeStateRecursively(memberItem);
				});
			}
    	}
    	
    	if($rootScope.data.items) {
	    	$.each($rootScope.data.items, function(i, item) {
				changeStateRecursively(item);
			});
    	}
	});
    
    $scope.getNumberOfNewDiscoveryResults = function() {
		var numberOfNewDiscoveryResults = 0;
		if(!$scope.data.discoveryResults) {
			return numberOfNewDiscoveryResults;
		}
    	for (var i = 0; i < $scope.data.discoveryResults.length; i++) {
			var discoveryResult = $scope.data.discoveryResults[i];
			if(discoveryResult.flag === 'NEW') {
				numberOfNewDiscoveryResults++;
			}
		}
    	return numberOfNewDiscoveryResults;
	}
    
    discoveryResultRepository.getAll();
    thingTypeRepository.getAll();
    bindingRepository.getAll();
}).controller('PreferencesPageController', function($rootScope, $scope, toastService) {
	$scope.setHeaderText('Edit user preferences.');
	
	var localStorage = window.localStorage;
    var language = localStorage.getItem('language');

    $scope.language = language ? language : 'english';
    $scope.advancedMode = $rootScope.advancedMode;
    $scope.save = function() {
        $rootScope.advancedMode = $scope.advancedMode;
        localStorage.setItem('paperui.language', $scope.language);
        localStorage.setItem('paperui.advancedMode', $rootScope.advancedMode);
        toastService.showSuccessToast('Preferences saved successfully. Please reload the page.');
    }

    $scope.getSelected = function(property) {
        return $('select#' + property + ' option:selected').val();
    }
}).controller('NavController', function($scope, $location, moduleConfig) {
    $scope.opened = null;
    $scope.open = function(viewLocation) {
    	$scope.opened = viewLocation;
    }
    $scope.isActive = function(viewLocation) {
        var active = (viewLocation === $location.path().split('/')[1]);
        return active || $scope.opened === viewLocation;
    }
    $scope.isSubActive = function(viewLocation) {
        var active = (viewLocation === $location.path().split('/')[2]);
        return active;
    }
    $scope.isHidden = function(module) {
        return moduleConfig[module] === false;
    }
    $scope.$on('$routeChangeSuccess', function() {
        $('body').removeClass('sml-open');
        $('.mask').remove();
        $scope.opened = null;
    });
}).controller('SelectGroupsDialogController', function($scope, $mdDialog, groupNames, homeGroupRepository) {
	$scope.homeGroups = [];
	$scope.groupNames = [];
	homeGroupRepository.getAll(function(homeGroups) {
		$.each(homeGroups, function(i, homeGroup) {
			if(groupNames.indexOf(homeGroup.name) >= 0) {
				$scope.groupNames[homeGroup.name] = true;
			} else {
				$scope.groupNames[homeGroup.name] = false;
			}
		});
		$scope.homeGroups = homeGroups;
	});
	$scope.close = function() {
		$mdDialog.cancel();
	}
	$scope.ok = function(groupNames) {
		var selectedGroupNames = [];
		for (var gropuName in groupNames) {
			if(groupNames[gropuName]) {
				selectedGroupNames.push(gropuName);
			}
		}
		$mdDialog.hide(selectedGroupNames);
	}
});
'use strict';

angular.module('PaperUI.controllers.rules').controller(
		'addModuleDialogController',
		function($rootScope, $scope, $mdDialog, moduleTypeService,
				sharedProperties, $filter, configService, module,
				ruleID, type) {

            var objectFilter = $filter('filter');

			$scope.moduleData = moduleTypeService.getByType({
				mtype : type
			});
			$scope.id = module.id;
			$scope.type = type;
			$scope.description = '';
			$scope.module = '';
			$scope.step = 1;
            $scope.editMode = false;

			function setConfigurations() {

				$scope.moduleData.$promise.then(function(data) {
					var params = filterByUid(data, $scope.module);
					var res = configService
							.getRenderingModel(params[0].configDescriptions);
					angular.forEach(res, function(value) {
						sharedProperties.updateParams(value);
					});
				});

                $scope.configuration = null;

				var index = sharedProperties.searchArray(sharedProperties
						.getModuleArray(type), $scope.id);
				if (index != -1) {
					$scope.configuration = sharedProperties
							.getModuleArray(type)[index].configuration;
					$scope.configArray = configService
							.getConfigAsArray($scope.configuration);
				}

				if (!$scope.configuration && ruleID) {
					moduleTypeService.getModuleConfigByUid({
						ruleUID : ruleID,
						moduleCategory : type,
						id : $scope.id
					}).$promise.then(function(config) {
						if (config) {
							$scope.configuration = config;
							$scope.configArray = configService
									.getConfigAsArray($scope.configuration);
						}
					});
				}
			}

			if ($scope.id) {
                $scope.editMode = true;
				$scope.module = module.type;
				$scope.name = module.label;
				$scope.description = module.description;
				setConfigurations();
				$scope.step = 2;
			}

			$scope.parameters = sharedProperties.getParams();

			$scope.close = function() {
				sharedProperties.resetParams();
				$mdDialog.hide();
			};

			$scope.saveModule = function() {
                var tempModule = filterByUid($scope.moduleData, $scope.module);
				if (tempModule != null && tempModule.length > 0) {
					tempModule[0].label = $scope.name;
					var obj = {
						id : $scope.id,
						label : $scope.name,
						description : $scope.description,
						type : tempModule[0].uid,
						configuration : $scope.configuration
					};
					sharedProperties.updateModule($scope.type, obj);
				}
				sharedProperties.resetParams();
				$mdDialog.hide();
			};

			$scope.deleteModule = function(opt) {
				sharedProperties.removeFromArray(opt, $scope.id);
				sharedProperties.resetParams();
				$mdDialog.hide();
			};

			$scope.secondStep = function() {
				var tempModule = filterByUid($scope.moduleData, $scope.module);
				if (tempModule != null && tempModule.length > 0) {
					$scope.name = tempModule[0].label;
					$scope.description = tempModule[0].description;
					setConfigurations();
					$scope.step = 2;
				}

			};

            function filterByUid(data, uid) {
                return objectFilter(data, {
                    uid : uid
                });
            }

		});
'use strict';

angular
		.module('PaperUI.controllers.rules', [])
		.controller(
				'RulesPageController',
				function($scope, $location, $mdDialog) {
					$scope.navigateTo = function(path) {
						$location.path('rules/' + path);
					};

					$scope.openDialog = function(ctrl, url, params) {
						$mdDialog.show({
							controller : ctrl,
							templateUrl : url,
							targetEvent : params.event,
							hasBackdrop : true,
							locals : params
						});
					};

					$scope.getRuleJSON = function(sharedProperties, uid, name,
							desc) {
						var rule = {
							tags : [],
							conditions : sharedProperties
									.getModuleJSON('condition'),
							description : desc,
							name : name,
							triggers : sharedProperties
									.getModuleJSON('trigger'),
							configDescriptions : [],
							actions : sharedProperties.getModuleJSON('action')
						};

						if (uid)
							rule.uid = uid;

						return rule;
					}
				})
		.controller(
				'RulesController',
				function($scope, $timeout, ruleRepository, ruleService,
						toastService, sharedProperties) {
					$scope.setHeaderText('Shows all rules.');

					$scope.refresh = function() {
						ruleRepository.getAll(true);
					};

					$scope.configure = function(rule) {
						$scope.navigateTo('configure/' + rule.uid);
					};

					$scope.remove = function(rule, e) {
						e.stopImmediatePropagation();
						ruleService.remove({
							ruleUID : rule.uid
						}, function() {
							$scope.refresh();
							toastService.showDefaultToast('Rule removed.');
						});
					};

					ruleRepository.getAll(true);

					$scope.removePart = function(opt, id) {
						sharedProperties.removeFromArray(opt, id);
					};
					$scope.toggleEnabled = function(rule, e) {
						e.stopImmediatePropagation();
						ruleService
								.setEnabled(
										{
											ruleUID : rule.uid
										},
										(!rule.enabled).toString(),
										function() {
											$scope.refresh();
											if (rule.enabled) {
												toastService
														.showDefaultToast('Rule disabled.');
											} else {
												toastService
														.showDefaultToast('Rule enabled.');
											}
										});
					};
				})
		.controller('ViewRuleController', function($scope, ruleRepository) {
			var ruleUID = $scope.path[3];
			ruleRepository.getOne(function(rule) {
				return rule.uid === ruleUID;
			}, function(rule) {
				$scope.setSubtitle([rule.name]);
				$scope.rule = rule;
			});
		})
		.controller(
				'NewRuleController',
				function($scope, itemRepository, ruleService, toastService,
						$mdDialog, sharedProperties) {
					$scope.setSubtitle(['New Rule']);
					itemRepository.getAll();
					sharedProperties.reset();
					$scope.editing = false;
					var ruleUID = $scope.path[3];

					if ($scope.path[3]) {
						ruleService.getByUid({
							ruleUID : ruleUID
						},
								function(data) {
									$scope.name = data.name;
									$scope.description = data.description;

									sharedProperties.addArray('trigger',
											data.triggers);
									sharedProperties.addArray('action',
											data.actions);
									sharedProperties.addArray('condition',
											data.conditions);

								});
						$scope.setSubtitle(['Configure']);
						$scope.editing = true;
					}

					$scope.saveUserRule = function() {

						var rule = $scope.getRuleJSON(sharedProperties, null,
								$scope.name, $scope.description);
						ruleService.add(rule);
						toastService.showDefaultToast('Rule added.');
						$scope.navigateTo('');
					};

					$scope.updateUserRule = function() {

						var rule = $scope
								.getRuleJSON(sharedProperties, $scope.path[3],
										$scope.name, $scope.description);
						ruleService.update({
							ruleUID : $scope.path[3]
						}, rule);
						toastService.showDefaultToast('Rule updated.');
						$scope.navigateTo('');
					};

					$scope.openNewModuleDialog = function(event, type) {
						$scope.openDialog('addModuleDialogController',
								'partials/dialog.addmodule.html', {
									event : event,
									module : {},
									ruleID : $scope.path[3] || '',
									type : type
								});
					};

					$scope.openUpdateModuleDialog = function(event, type,
							module) {
						$scope.openDialog('addModuleDialogController',
								'partials/dialog.addmodule.html', {
									event : event,
									module : module,
									ruleID : $scope.path[3] || '',
									type : type
								});
					};

					$scope.aTriggers = sharedProperties.getTriggersArray();
					$scope.aActions = sharedProperties.getActionsArray();
					$scope.aConditions = sharedProperties.getConditionsArray();

				})
		.controller(
				'RuleConfigureController',
				function($scope, ruleRepository, ruleService, toastService) {
					$scope.setSubtitle(['Configure']);
					var ruleUID = $scope.path[3];

					ruleRepository.getOne(function(rule) {
						return rule.uid === ruleUID;
					}, function(rule) {
						$scope.setSubtitle(['Configure ' + rule.name]);
					});

					ruleService.getModuleConfigParameter({
						ruleUID : ruleUID
					}, function(data) {
						$scope.script = data.content;
					});

					$scope.save = function() {
						ruleService
								.setModuleConfigParameter(
										{
											ruleUID : ruleUID
										},
										$scope.script,
										function() {
											toastService
													.showDefaultToast('Rule updated successfully.');
											$scope.navigateTo('');
										});
					};
				});
function getThingTypeUID(thingUID) {
    var segments = thingUID.split(':');
    return segments[0] + ':' + segments[1];
};

angular.module('PaperUI.controllers.setup', 
[]).controller('SetupPageController', function($scope, $location, thingTypeRepository, bindingRepository) {
    $scope.navigateTo = function(path) {
        $location.path('setup/' + path);
    }
    $scope.getThingTypeUID = function(thingUID) {
        return getThingTypeUID(thingUID);
    }
    $scope.thingTypes = [];
    thingTypeRepository.getAll(function(thingTypes) {
        $.each(thingTypes, function(i, thingType) {
            $scope.thingTypes[thingType.UID] = thingType;
        });
    });
}).controller('InboxController', function($scope, $timeout, $mdDialog, $q, inboxService, discoveryResultRepository, 
        thingTypeRepository, thingSetupService, toastService) {
    $scope.setHeaderText('Shows a list of found things in your home.')
    
    $scope.showScanDialog = function(event) {
		$mdDialog.show({
			controller : 'ScanDialogController',
			templateUrl : 'partials/dialog.scan.html',
			targetEvent : event,
		});
    }
    
    $scope.refresh = function() {
    	discoveryResultRepository.getAll(true);
    };
}).controller('InboxEntryController', function($scope, $mdDialog, $q, inboxService, discoveryResultRepository, 
        thingTypeRepository, thingSetupService, toastService, thingRepository) {
    $scope.approve = function(thingUID, event) {
        $mdDialog.show({
            controller : 'ApproveInboxEntryDialogController',
            templateUrl : 'partials/dialog.approveinboxentry.html',
            targetEvent : event,
            locals: {discoveryResult: discoveryResultRepository.find(function(discoveryResult) {
                return discoveryResult.thingUID === thingUID;
            })}
        }).then(function(result) {
            inboxService.approve({'thingUID' : thingUID, 'enableChannels': !$scope.advancedMode }, result.label).$promise.then(function() {
                return thingSetupService.setGroups({'thingUID' : thingUID}, result.groupNames).$promise;
            }).then(function() {
                thingRepository.setDirty(true);

                toastService.showDefaultToast('Thing added.', 'Show Thing', 'configuration/things/view/' + thingUID);
                var thingTypeUID = $scope.getThingTypeUID(thingUID);
                var thingType = thingTypeRepository.find(function(thingType) {
                    return thingTypeUID === thingType.UID;
                });
                
                if(thingType && thingType.bridge) {
                    $scope.navigateTo('wizard/search/' + thingUID.split(':')[0]);
                } else {
                	discoveryResultRepository.getAll(true);
                }
            });
        });
    };
    $scope.ignore = function(thingUID) {
        inboxService.ignore({
            'thingUID' : thingUID
        }, function() {
            $scope.refresh();
        });
    };
    $scope.unignore = function(thingUID) {
        inboxService.unignore({
            'thingUID' : thingUID
        }, function() {
            $scope.refresh();
        });
    };
    $scope.remove = function(thingUID, event) {
        var discoveryResult = discoveryResultRepository.find(function(discoveryResult) {
            return discoveryResult.thingUID === thingUID;
        });
        var confirm = $mdDialog.confirm()
          .title('Remove ' + discoveryResult.label)
          .content('Would you like to remove the discovery result from the inbox?')
          .ariaLabel('Remove Discovery Result')
          .ok('Remove')
          .cancel('Cancel')
          .targetEvent(event);
        $mdDialog.show(confirm).then(function() {
            inboxService.remove({
                'thingUID' : thingUID
            }, function() {
                $scope.refresh();
                toastService.showSuccessToast('Inbox entry removed');
            });
        });
    };
}).controller('ScanDialogController', function($scope, $rootScope, $timeout, $mdDialog, discoveryService, bindingRepository) {
    $scope.supportedBindings = [];
    $scope.activeScans = [];
    
    $scope.scan = function(bindingId) {
        $scope.activeScans.push(bindingId);
    	discoveryService.scan({
            'bindingId' : bindingId
        }, function() {

        });
    	setTimeout(function() {
    	    $scope.$apply(function () {
    	        $scope.activeScans.splice($scope.activeScans.indexOf(bindingId), 1)
    	    });
        }, 3000);
    };
    
    bindingRepository.getAll();
    
    $scope.getBindingById = function(bindingId) {
    	for (var i = 0; i < $rootScope.data.bindings.length; i++) {
            var binding = $rootScope.data.bindings[i];
            if(binding.id === bindingId) {
            	return binding;
            }
    	}
    	return {};
    }
    
    discoveryService.getAll(function(response) {
        $scope.supportedBindings = response;
    });
    
    $scope.close = function() {
		$mdDialog.hide();
	}
}).controller('ApproveInboxEntryDialogController', function($scope, $mdDialog, discoveryResult, thingTypeRepository, 
        homeGroupRepository) {
	$scope.discoveryResult = discoveryResult;
	$scope.label = discoveryResult.label;
	$scope.homeGroups = [];
    $scope.groupNames = [];
    $scope.thingType = null;
    var thingTypeUID = getThingTypeUID(discoveryResult.thingUID);
    thingTypeRepository.getOne(function(thingType) {
        return thingType.UID === thingTypeUID;
    }, function(thingType) {
        $scope.thingType = thingType;
    });

    homeGroupRepository.getAll(function(homeGroups) {
        $.each(homeGroups, function(i, homeGroup) {
            $scope.groupNames[homeGroup.name] = false;
        });
        $scope.homeGroups = homeGroups;
    });
    
	$scope.close = function() {
		$mdDialog.cancel();
	}
	$scope.approve = function(label) {
	    var selectedGroupNames = [];
	    for (var groupName in $scope.groupNames) {
            if($scope.groupNames[groupName]) {
                selectedGroupNames.push(groupName);
            }
        }
		$mdDialog.hide({label: label,  groupNames: selectedGroupNames});
	}
}).controller('ManualSetupChooseController', function($scope, bindingRepository, thingTypeRepository, thingSetupService) {
	$scope.setSubtitle(['Manual Setup']);
	$scope.setHeaderText('Choose a thing, which should be aded manually to your Smart Home.')
	
	$scope.currentBindingId = null;
	$scope.setCurrentBindingId = function(bindingId) {
		$scope.currentBindingId = bindingId;
	};
	
    bindingRepository.getAll(function(data) {
	});
   
}).controller('ManualSetupConfigureController', function($scope, $routeParams, $mdDialog, toastService, 
		bindingRepository, thingTypeRepository, thingSetupService, homeGroupRepository, thingRepository, configService) {
	
	var thingTypeUID = $routeParams.thingTypeUID;
	
	function generateUUID() {
	    var d = new Date().getTime();
	    var uuid = 'xxxxxxxx'.replace(/[x]/g, function(c) {
	        var r = (d + Math.random()*16)%16 | 0;
	        d = Math.floor(d/16);
	        return (c=='x' ? r : (r&0x3|0x8)).toString(16);
	    });
	    return uuid;
	};
	
	$scope.thingType = null;
	$scope.thing = {
		UID: null,
		configuration : {},
		item: {
			label: null,
			groupNames: []
		}
	}
	$scope.homeGroups = [];
    $scope.groupNames = [];

    homeGroupRepository.getAll(function(homeGroups) {
        $.each(homeGroups, function(i, homeGroup) {
            $scope.groupNames[homeGroup.name] = false;
        });
        $scope.homeGroups = homeGroups;
    });

	$scope.addThing = function(thing) {
	    
	    for (var groupName in $scope.groupNames) {
            if($scope.groupNames[groupName]) {
                thing.item.groupNames.push(groupName);
            }
        }
		thingSetupService.add({'enableChannels': !$scope.advancedMode}, thing, function() {
		    homeGroupRepository.setDirty(true);
			toastService.showDefaultToast('Thing added');
			$scope.navigateTo('wizard/search/' + $scope.thingType.UID.split(':')[0]);
		});
	};
	
	$scope.needsBridge = false;
	$scope.bridges = [];
	$scope.getBridges = function() {
	    $scope.bridges = [];
	    thingRepository.getAll(function(things) {
            for (var i = 0; i < things.length; i++) {
                var thing = things[i];
                for (var j = 0; j < $scope.thingType.supportedBridgeTypeUIDs.length; j++) {
                    var supportedBridgeTypeUID = $scope.thingType.supportedBridgeTypeUIDs[j];
                    if(getThingTypeUID(thing.UID) === supportedBridgeTypeUID) {
                        $scope.bridges.push(thing);
                    }   
                }
            }
        });
    };
	
	thingTypeRepository.getOne(function(thingType) {
    	return thingType.UID === thingTypeUID;
    },function(thingType) {
    	$scope.setTitle('Configure ' + thingType.label);
    	$scope.setHeaderText(thingType.description);
		$scope.thingType = thingType;
        $scope.parameters = configService.getRenderingModel(thingType.configParameters);
		$scope.thing.UID = thingType.UID + ':' + generateUUID();
		$scope.thing.item.label = thingType.label;
		$scope.needsBridge = $scope.thingType.supportedBridgeTypeUIDs && $scope.thingType.supportedBridgeTypeUIDs.length > 0;
		if($scope.needsBridge) {
		    $scope.getBridges();
		}
		configService.setDefaults($scope.thing, $scope.thingType)
    });
}).controller('SetupWizardController', function($scope, discoveryResultRepository) {
    $scope.showIgnored = false;
    $scope.toggleShowIgnored = function() {
        $scope.showIgnored = !$scope.showIgnored;
    }
    $scope.refresh = function() {
        discoveryResultRepository.getAll(true);
    };
    $scope.refresh();
    $scope.filter = function(discoveryResult) {
        return $scope.showIgnored || discoveryResult.flag === 'NEW';
    }
}).controller('SetupWizardBindingsController', function($scope, bindingRepository) {
    $scope.setSubtitle(['Choose Binding']);
    $scope.setHeaderText('Choose a Binding for which you want to add new things.');
    bindingRepository.getAll();
    $scope.selectBinding = function(bindingId) {
        $scope.navigateTo('wizard/search/' + bindingId);
    }
}).controller('SetupWizardSearchBindingController', function($scope, discoveryResultRepository, discoveryService, 
        thingTypeRepository, bindingRepository) {
    $scope.showIgnored = false;
    $scope.toggleShowIgnored = function() {
        $scope.showIgnored = !$scope.showIgnored;
    }
    $scope.bindingId = $scope.path[4];
    var binding = bindingRepository.find(function(binding) {
        return binding.id === $scope.bindingId;
    });
    $scope.setSubtitle([binding ? binding.name : '', 'Search']);
    $scope.setHeaderText('Searching for new things for the ' + (binding ? binding.name : '') + '.');
    
    $scope.discoverySupported = true;
    discoveryService.getAll(function(supportedBindings) {
        if(supportedBindings.indexOf($scope.bindingId) >= 0) {
            $scope.discoverySupported = true;
            $scope.scan($scope.bindingId);
        } else {
            $scope.discoverySupported = false;
        } 
    });
    
    $scope.scanning = false;
    $scope.filter = function(discoveryResult) {
        return ($scope.showIgnored || discoveryResult.flag === 'NEW') && discoveryResult.thingUID.split(':')[0] === $scope.bindingId;
    }
    $scope.scan = function(bindingId) {
        $scope.scanning = true;
        discoveryService.scan({
            'bindingId' : bindingId
        }, function() {
        });
        setTimeout(function() {
            $scope.$apply(function () {
                $scope.scanning = false; 
            });
        }, 10000);
    };
    
    $scope.refresh = function() {
        discoveryResultRepository.getAll(true);
    };
    $scope.refresh();
}).controller('SetupWizardThingTypesController', function($scope, bindingRepository) {
    $scope.bindingId = $scope.path[4];
    var binding = bindingRepository.find(function(binding) {
        return binding.id === $scope.bindingId;
    });
    $scope.setSubtitle([binding ? binding.name : '', 'Choose Thing']);
    $scope.setHeaderText('Choose a Thing from the ' + (binding ? binding.name : '') + ' which you want to add.');
    
    $scope.selectThingType = function(thingTypeUID) {
        $scope.navigateTo('wizard/add/' + thingTypeUID);
    }
    $scope.filter = function(thingType) {
        return thingType.UID.split(':')[0] === $scope.bindingId;
    }
});